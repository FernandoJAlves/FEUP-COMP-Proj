/* Project.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Project.java */
import java.util.regex.*;
import java.util.ArrayList;

public class Project/*@bgen(jjtree)*/implements ProjectTreeConstants, ProjectConstants {/*@bgen(jjtree)*/
  protected static JJTProjectState jjtree = new JJTProjectState();public static int MAX_ERRORS = 10;

    public static ArrayList<ParseException> errors;
    public static void main(String args[]) throws ParseException {
        Project myCalc = new Project(System.in);
        myCalc.errors = new ArrayList<ParseException>();
        try {
            SimpleNode root = myCalc.Program(); // devolve referência para o nó raizda árvore
            if(myCalc.errors.size() != 0) {
                for(int i = 0; i < myCalc.errors.size(); ){
                    System.out.println("Unexpected symbol \u005c"" + myCalc.errors.get(i).currentToken.image + "\u005c" occurred after"
                        + " Line:" + myCalc.errors.get(i).currentToken.endLine
                        + ", Column:" + myCalc.errors.get(i).currentToken.endColumn);
                        i++;
                        if(i >= MAX_ERRORS){
                            int remErrors = (myCalc.errors.size()-i);
                            if(remErrors == 1)
                                System.out.println("There is " + remErrors + " more error.");
                            else if(remErrors == 0)
                                break;
                            else
                                System.out.println("There are " + remErrors + " more errors.");
                            break;
                        }
                }
            } else
                root.dump("");// imprime no ecrã a árvore
        } catch (ParseException e) {
            System.out.println("Unhandled Exception at line " + e.currentToken.beginLine + " and column " + e.currentToken.beginColumn);
            System.out.println("\u005cn\u005cn" + e);
        }


    }

// UTILS - START
  static final public void Empty() throws ParseException {

  }

  static final public void IntegerLiteral() throws ParseException {/*@bgen(jjtree) IntegerLiteral */
  ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OCTAL:{
        jj_consume_token(OCTAL);
        break;
        }
      case BINARY:{
        jj_consume_token(BINARY);
        break;
        }
      case HEX:{
        jj_consume_token(HEX);
        break;
        }
      case DECIMAL:{
        jj_consume_token(DECIMAL);
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
        jj_consume_token(DECIMAL);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// UTILS - END



// PROGRAM/CLASS DECLARATION - START
  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(OPENBRACK);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      MainMethodDeclaration();
      jj_consume_token(CLOSEBRACK);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// PROGRAM/CLASS DECLARATION - END



// VAR DECLARATION - START
  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclarationWoIdent() throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeWoIdent();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// VAR DECLARATION - END



// MAIN/METHOD - START
  static final public void MainMethodDeclaration() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        MainDeclaration();
        break;
        }
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        MethodDeclaration();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(OPENPAR);
      jj_consume_token(STRING);
      jj_consume_token(OPENSQBRACK);
      jj_consume_token(CLOSESQBRACK);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(CLOSEPAR);
      jj_consume_token(OPENBRACK);
      MainMethodBody();
      jj_consume_token(CLOSEBRACK);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(OPENPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
ASTArgument jjtn002 = new ASTArgument(JJTARGUMENT);
                                             boolean jjtc002 = true;
                                             jjtree.openNodeScope(jjtn002);
        try {
          Type();
        } catch (Throwable jjte002) {
if (jjtc002) {
                                               jjtree.clearNodeScope(jjtn002);
                                               jjtc002 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte002 instanceof RuntimeException) {
                                               {if (true) throw (RuntimeException)jjte002;}
                                             }
                                             if (jjte002 instanceof ParseException) {
                                               {if (true) throw (ParseException)jjte002;}
                                             }
                                             {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                               jjtree.closeNodeScope(jjtn002, true);
                                             }
        }
        jj_consume_token(IDENTIFIER);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMA:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMA);
          Type();
          jj_consume_token(IDENTIFIER);
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(CLOSEPAR);
      jj_consume_token(OPENBRACK);
      MainMethodBody();
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CLOSEBRACK);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainMethodBody() throws ParseException {/*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THIS:
        case NEW:
        case FALSE:
        case TRUE:
        case NOT:
        case SUB:
        case WHILE:
        case IF:
        case OPENPAR:
        case OPENBRACK:
        case INT:
        case BOOLEAN:
        case OCTAL:
        case BINARY:
        case HEX:
        case DECIMAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        InMethod();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void InMethod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      VarDeclarationWoIdent();
      break;
      }
    case THIS:
    case NEW:
    case FALSE:
    case TRUE:
    case NOT:
    case SUB:
    case WHILE:
    case IF:
    case OPENPAR:
    case OPENBRACK:
    case OCTAL:
    case BINARY:
    case HEX:
    case DECIMAL:
    case IDENTIFIER:{
      Statement();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// MAIN/METHOD - END



// TYPE - START
  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
ASTInt jjtn001 = new ASTInt(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      TypeAux();
      break;
      }
    case BOOLEAN:{
ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
      break;
      }
    case IDENTIFIER:{
ASTIndentifier jjtn003 = new ASTIndentifier(JJTINDENTIFIER);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TypeAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPENSQBRACK:{
      jj_consume_token(OPENSQBRACK);
ASTIsArray jjtn001 = new ASTIsArray(JJTISARRAY);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(CLOSESQBRACK);
      } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void TypeWoIdent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
ASTInt jjtn001 = new ASTInt(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      TypeAux();
      break;
      }
    case BOOLEAN:{
ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// TYPE - END



// STATEMENT - START
  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPENBRACK:{
        jj_consume_token(OPENBRACK);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case THIS:
          case NEW:
          case FALSE:
          case TRUE:
          case NOT:
          case SUB:
          case WHILE:
          case IF:
          case OPENPAR:
          case OPENBRACK:
          case OCTAL:
          case BINARY:
          case HEX:
          case DECIMAL:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          Statement();
        }
        jj_consume_token(CLOSEBRACK);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(OPENPAR);
        Expression();
        jj_consume_token(CLOSEPAR);
        Statement();
        jj_consume_token(ELSE);
        Statement();
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(OPENPAR);
        try {
          Expression();
          jj_consume_token(CLOSEPAR);
        } catch (ParseException e) {
errors.add(e);
        Token next_token = getToken(1);
        /*
        CLOSEPAR: when there's an error inside Expression() but there is the close parentesis
        OPENBRACK: when there's an error in the expression but the close parentesis aren't there
        CLOSEBRACK: when there's an error in the expression and there aren't parentesis or the open bracket
        EOF: when the user starts the while expression but compiles before finishing it
        SEMICOLON: when there's an error and there aren't parentesis and the expression doesn't have brackets
        */
        while(next_token.kind != CLOSEPAR
                && next_token.kind != OPENBRACK
                && next_token.kind != CLOSEBRACK
                && next_token.kind != EOF
                && next_token.kind != SEMICOLON) {
            getNextToken();
            next_token = getToken(1);
        }
        if(next_token.kind == CLOSEPAR || next_token.kind == SEMICOLON) {
            getNextToken();
        }
        if(next_token.kind == EOF || next_token.kind == SEMICOLON) {
            {if ("" != null) return;}
        }
        }
        Statement();
        break;
        }
      case THIS:
      case NEW:
      case FALSE:
      case TRUE:
      case NOT:
      case SUB:
      case OPENPAR:
      case OCTAL:
      case BINARY:
      case HEX:
      case DECIMAL:{
        ExpressionWoIdent();
        jj_consume_token(SEMICOLON);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        StatementAux2();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StatementAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPENSQBRACK:{
      jj_consume_token(OPENSQBRACK);
      Expression();
      jj_consume_token(CLOSESQBRACK);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void StatementAux2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:
    case EQUAL:
    case OPENSQBRACK:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case OPENSQBRACK:{
        StatementAux();
        jj_consume_token(EQUAL);
        Expression();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      ExpressionAuxDot();
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// STATEMENT - END



// EXPRESSION - START
  static final public void ExpressionWoIdent() throws ParseException {/*@bgen(jjtree) ExpressionWoIdent */
  ASTExpressionWoIdent jjtn000 = new ASTExpressionWoIdent(JJTEXPRESSIONWOIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionTokenWoIdent();
      ExpressionAux();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionTokenWoIdent() throws ParseException {/*@bgen(jjtree) ExpressionTokenWoIdent */
  ASTExpressionTokenWoIdent jjtn000 = new ASTExpressionTokenWoIdent(JJTEXPRESSIONTOKENWOIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        ExpressionNew();
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        Expression();
        break;
        }
      case OPENPAR:{
        jj_consume_token(OPENPAR);
        Expression();
        jj_consume_token(CLOSEPAR);
        break;
        }
      case SUB:
      case OCTAL:
      case BINARY:
      case HEX:
      case DECIMAL:{
        IntegerLiteral();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionMinor();
      ExpressionAnd();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionAnd() throws ParseException {/*@bgen(jjtree) ExpressionAnd */
  ASTExpressionAnd jjtn000 = new ASTExpressionAnd(JJTEXPRESSIONAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        ExpressionMinor();
        ExpressionAnd();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        Empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionMinor() throws ParseException {/*@bgen(jjtree) ExpressionMinor */
  ASTExpressionMinor jjtn000 = new ASTExpressionMinor(JJTEXPRESSIONMINOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionAdd();
      ExpressionMinorAux();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionMinorAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINOR:{
      jj_consume_token(MINOR);
      ExpressionAdd();
      ExpressionMinorAux();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      Empty();
    }
  }

  static final public void ExpressionAdd() throws ParseException {/*@bgen(jjtree) ExpressionAdd */
  ASTExpressionAdd jjtn000 = new ASTExpressionAdd(JJTEXPRESSIONADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionMult();
      ExpressionAddAux();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionAddAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUB:
    case ADD:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressionMult();
      ExpressionAddAux();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      Empty();
    }
  }

  static final public void ExpressionMult() throws ParseException {/*@bgen(jjtree) ExpressionMult */
  ASTExpressionMult jjtn000 = new ASTExpressionMult(JJTEXPRESSIONMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionRestOfClauses();
      ExpressionMultAux();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionMultAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:
    case DIV:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        jj_consume_token(MULT);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ExpressionRestOfClauses();
      ExpressionMultAux();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      Empty();
    }
  }

  static final public void ExpressionRestOfClauses() throws ParseException {/*@bgen(jjtree) ExpressionRestOfClauses */
  ASTExpressionRestOfClauses jjtn000 = new ASTExpressionRestOfClauses(JJTEXPRESSIONRESTOFCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpressionToken();
      ExpressionAux();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionAux() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      ExpressionAuxDot();
      break;
      }
    case OPENSQBRACK:{
      jj_consume_token(OPENSQBRACK);
      Expression();
      jj_consume_token(CLOSESQBRACK);
      ExpressionAux();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      Empty();
    }
  }

  static final public void ExpressionAuxDot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
      jj_consume_token(LENGTH);
      ExpressionAux();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      jj_consume_token(OPENPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:
      case NEW:
      case FALSE:
      case TRUE:
      case NOT:
      case SUB:
      case OPENPAR:
      case OCTAL:
      case BINARY:
      case HEX:
      case DECIMAL:
      case IDENTIFIER:{
        Expression();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMA:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMA);
          Expression();
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(CLOSEPAR);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressionToken() throws ParseException {/*@bgen(jjtree) ExpressionToken */
  ASTExpressionToken jjtn000 = new ASTExpressionToken(JJTEXPRESSIONTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        ExpressionNew();
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        Expression();
        break;
        }
      case OPENPAR:{
        jj_consume_token(OPENPAR);
        Expression();
        jj_consume_token(CLOSEPAR);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case SUB:
      case OCTAL:
      case BINARY:
      case HEX:
      case DECIMAL:{
        IntegerLiteral();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionNew() throws ParseException {/*@bgen(jjtree) ExpressionNew */
  ASTExpressionNew jjtn000 = new ASTExpressionNew(JJTEXPRESSIONNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(OPENSQBRACK);
        Expression();
        jj_consume_token(CLOSESQBRACK);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(OPENPAR);
        jj_consume_token(CLOSEPAR);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProjectTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x0,0x0,0x0,0x0,0x1000,0x0,0x51848780,0x51848780,0x0,0x4000000,0x0,0x51848780,0x51848780,0x4000000,0x4400000,0x4406000,0x10048780,0x200000,0x100000,0xc0000,0xc0000,0x30000,0x30000,0x4002000,0x1000,0x10048780,0x800,0x10048780,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3c00,0x200,0x4003,0x40,0x4083,0x0,0x4003,0x7c03,0x7c03,0x4003,0x0,0x3,0x7c00,0x7c00,0x0,0x0,0x4000,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c00,0x4000,0x7c00,0x4001,};
   }

  /** Constructor with InputStream. */
  public Project(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Project(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProjectTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Project(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProjectTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Project(ProjectTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProjectTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
