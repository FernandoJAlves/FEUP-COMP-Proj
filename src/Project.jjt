
options
{
    LOOKAHEAD=1;
    MULTI=true;
    JJTREE_OUTPUT_DIRECTORY = "ASTFiles";
}

PARSER_BEGIN(Project)

import java.util.regex.*;
import java.util.ArrayList;

public class Project
{
    public static int MAX_ERRORS = 10;

    public static ArrayList<ParseException> errors;
    public static void main(String args[]) throws ParseException {
        Project myCalc = new Project(System.in);
        myCalc.errors = new ArrayList<ParseException>();
        try {
            SimpleNode root = myCalc.Program(); // devolve referência para o nó raizda árvore
            if(myCalc.errors.size() != 0) {
                for(int i = 0; i < myCalc.errors.size(); ){
                    System.out.println("Unexpected symbol \"" + myCalc.errors.get(i).currentToken.image + "\" occurred after" 
                        + " Line:" + myCalc.errors.get(i).currentToken.endLine 
                        + ", Column:" + myCalc.errors.get(i).currentToken.endColumn);
                        i++;
                        if(i >= MAX_ERRORS){
                            int remErrors = (myCalc.errors.size()-i);
                            if(remErrors == 1)
                                System.out.println("There is " + remErrors + " more error.");
                            else if(remErrors == 0)
                                break;
                            else
                                System.out.println("There are " + remErrors + " more errors.");
                            break;
                        }
                }
            } else 
                root.dump("");// imprime no ecrã a árvore
        } catch (ParseException e) {
            System.out.println("Unhandled Exception at line " + e.currentToken.beginLine + " and column " + e.currentToken.beginColumn);
            System.out.println("\n\n" + e);
        }
        
       
    }
}

PARSER_END(Project)

SKIP :
{
    " " | "\r" | "\t" | "\n" |  <"//"(~["\r","\n"])*> | <"/*"( ~["*"] | ("*"(~["/"])?) )* "*/">
}

TOKEN :
{
    < THIS: "this" >
    | < NEW: "new" >
    | < FALSE: "false" >
    | < TRUE: "true" >
    | < LENGTH: "length" >
    | < COMA : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < NOT : "!" >
    | < MULT : "*" >
    | < DIV : "/" >
    | < SUB : "-" >
    | < ADD : "+" >
    | < MINOR : "<" >
    | < AND : "&&" >
    | < EQUAL : "=" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < OPENSQBRACK : "[" >
    | < CLOSESQBRACK : "]" >
    | < OPENPAR : "(" >
    | < CLOSEPAR : ")" >
    | < OPENBRACK : "{" >
    | < CLOSEBRACK : "}" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < STRING : "String">
    | < VOID : "void" >
    | < MAIN : "main" >
    | < RETURN : "return" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < CLASS : "class" >
    | < EXTENDS : "extends" >
    | < OCTAL: "0"(["0"-"7"])+ >
    | < BINARY: "0b"("1"|"0")+ >
    | < HEX: "0"("x"|"X")(["0"-"9","a"-"f","A"-"F"])+ >
    | < DECIMAL: (["0"-"9"])+(("_")*(["0"-"9"])+)* >
    | < IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}


// UTILS - START
void Empty() #void : {}
{
     {}
} 

void IntegerLiteral(): {Token t, z;}
{
    t=<OCTAL>{jjtThis.setName(t.image);}
    | t=<BINARY>{jjtThis.setName(t.image);}
    | t=<HEX>{jjtThis.setName(t.image);}
    | t=<DECIMAL>{jjtThis.setName(t.image);}
    | t=<SUB> z=<DECIMAL> {jjtThis.setName(t.image + z.image);}
}

void Identifier():{Token t;}{
    t=<IDENTIFIER>
    {
        jjtThis.setName(t.image);
    }

}
// UTILS - END



// PROGRAM/CLASS DECLARATION - START
SimpleNode Program(): {}
{
    ClassDeclaration()  { return jjtThis; }// código Java entre chavetas
}

void ClassDeclaration(): {Token t;} 
{
    <CLASS> t=<IDENTIFIER>{jjtThis.setName(t.image);} [<EXTENDS> t=<IDENTIFIER>{jjtThis.setExtends(t.image);}] <OPENBRACK> (VarDeclaration())* MainMethodDeclaration() <CLOSEBRACK>
}
// PROGRAM/CLASS DECLARATION - END



// VAR DECLARATION - START
void VarDeclaration():{Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.setName(t.image);} <SEMICOLON> //TODO: Show identifier
}

void VarDeclarationWoIdent():{Token t;}
{
    TypeWoIdent() t=<IDENTIFIER>{jjtThis.setName(t.image);} <SEMICOLON> //TODO: Show identifier
}
// VAR DECLARATION - END



// MAIN/METHOD - START
void MainMethodDeclaration() #void :{}
{
    (<PUBLIC> (MainDeclaration() | MethodDeclaration()))* 
}

void MainDeclaration():{} 
{
    <STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENSQBRACK> <CLOSESQBRACK> Identifier() <CLOSEPAR> <OPENBRACK> MainMethodBody() <CLOSEBRACK> 
}

void MethodDeclaration():{Token t;} 
{
    Type() t=<IDENTIFIER>{jjtThis.setName(t.image);} <OPENPAR> [Type() t=<IDENTIFIER>{jjtThis.pushArg(t.image);} (<COMA> Type() t=<IDENTIFIER>{jjtThis.pushArg(t.image);})*] <CLOSEPAR> <OPENBRACK> MainMethodBody() <RETURN> Expression() <SEMICOLON> <CLOSEBRACK>
}

void MainMethodBody() #void :{}
{
    (InMethod())*
}

void InMethod() #void :{} 
{
    VarDeclarationWoIdent()
    | Statement()
}
// MAIN/METHOD - END



// TYPE - START
void Type() #void :{}
{
    <INT> TypeAux()
    | <BOOLEAN> 
    | <IDENTIFIER>
}

void TypeAux() #void :{}
{
    [<OPENSQBRACK> <CLOSESQBRACK> #IsArray]
}

void TypeWoIdent() #void :{}
{
    <INT> TypeAux()
    | <BOOLEAN>
}
// TYPE - END



// STATEMENT - START
void Statement() #void :{} 
{
    <OPENBRACK> (Statement())* <CLOSEBRACK>
    | <IF> <OPENPAR> Expression() <CLOSEPAR> Statement() <ELSE> Statement()
    
    /*BEGINNING OF WHILE STATEMENT*/

    | <WHILE> <OPENPAR> 
    try {
        Expression() <CLOSEPAR>
    }
    catch(ParseException e) {
        errors.add(e);
        Token next_token = getToken(1);
        /*
        CLOSEPAR: when there's an error inside Expression() but there is the close parentesis
        OPENBRACK: when there's an error in the expression but the close parentesis aren't there
        CLOSEBRACK: when there's an error in the expression and there aren't parentesis or the open bracket
        EOF: when the user starts the while expression but compiles before finishing it
        SEMICOLON: when there's an error and there aren't parentesis and the expression doesn't have brackets
        */
        while(next_token.kind != CLOSEPAR
                && next_token.kind != OPENBRACK
                && next_token.kind != CLOSEBRACK
                && next_token.kind != EOF
                && next_token.kind != SEMICOLON) {
            getNextToken();
            next_token = getToken(1);
        }
        if(next_token.kind == CLOSEPAR || next_token.kind == SEMICOLON) {
            getNextToken();
        }
        if(next_token.kind == EOF || next_token.kind == SEMICOLON) {
            return;
        }
    }
    Statement()

    /*END OF WHILE STATEMENT*/

    | ExpressionWoIdent() <SEMICOLON> //criar Expression2 com ExpressionToken2 de maneira a nao usar IDENTIFIER
    | Identifier() StatementAux2()
}

void StatementAux1():{Token t;}
{
    t=<EQUAL>{jjtThis.setOperation(t.image);} Expression()
}

void StatementAux2():{Token t, z;}
{
    StatementAux1() <SEMICOLON>
    | t=<DOT>{jjtThis.setOperation(t.image);} ExpressionAuxDot() <SEMICOLON>
    | t=<IDENTIFIER>{jjtThis.setName(t.image);} <SEMICOLON>
    | t=<OPENSQBRACK>{jjtThis.setOperation(t.image);} Expression() <CLOSESQBRACK> [StatementAux1()] ExpressionAux() <SEMICOLON>
}
// STATEMENT - END



// EXPRESSION - START
void ExpressionWoIdent()#void:{}
{
    ExpressionTokenWoIdent() ExpressionAux()
}

void ExpressionTokenWoIdent():{Token t;}
{
    t=<TRUE>{jjtThis.setName(t.image);}
    | t=<FALSE>{jjtThis.setName(t.image);}
    | t=<THIS>{jjtThis.setName(t.image);}
    | t=<NEW>{jjtThis.setName(t.image);} ExpressionNew()
    | t=<NOT>{jjtThis.setName(t.image);} Expression()
    | <OPENPAR> Expression() <CLOSEPAR>
    | IntegerLiteral()
}

void Expression():{}
{
    ExpressionMinor() ExpressionAnd()
}

void ExpressionAnd():{Token t;} {
    t=<AND>{jjtThis.setOp(t.image);} ExpressionMinor() ExpressionAnd()
    | Empty()
}

void ExpressionMinor() #void :{} {
    ExpressionAdd() ExpressionMinorAux()
}

void ExpressionMinorAux():{Token t;} {
    t=<MINOR>{jjtThis.setOp(t.image);} ExpressionAdd() ExpressionMinorAux() 
    | Empty()
}

void ExpressionAdd() #void :{} {
    ExpressionMult() ExpressionAddAux()
}

void ExpressionAddAux():{Token t;} {
    (t=<ADD>{jjtThis.setOp(t.image);}| t=<SUB>{jjtThis.setOp(t.image);}) ExpressionMult() ExpressionAddAux() 
    | Empty()
}

void ExpressionMult() #void :{} {
    ExpressionRestOfClauses() ExpressionMultAux()
}

void ExpressionMultAux():{Token t;} {
    (t=<MULT>{jjtThis.setOp(t.image);} | t=<DIV>{jjtThis.setOp(t.image);}) ExpressionRestOfClauses() ExpressionMultAux() 
    | Empty()
}

void ExpressionRestOfClauses() #void :{} {
    ExpressionToken() ExpressionAux()
}

void ExpressionAux() #void:{}
{
    <DOT> ExpressionAuxDot()
    | <OPENSQBRACK> Expression() <CLOSESQBRACK> ExpressionAux()
    | Empty()
}

void ExpressionAuxDot():{Token t;}
{
    t=<LENGTH>{jjtThis.setName(t.image);} ExpressionAux()
    | t=<IDENTIFIER>{jjtThis.setName(t.image);} <OPENPAR> [Expression() (<COMA> Expression())*] <CLOSEPAR>
}

void ExpressionToken():{Token t;}
{
    t=<TRUE>{jjtThis.setName(t.image);}
    | t=<FALSE>{jjtThis.setName(t.image);}
    | t=<THIS>{jjtThis.setName(t.image);}
    | t=<NEW>{jjtThis.setName(t.image);} ExpressionNew()
    | t=<NOT>{jjtThis.setName(t.image);} Expression()
    | <OPENPAR> Expression() <CLOSEPAR>
    | Identifier()
    | IntegerLiteral()
}

void ExpressionNew() :{Token t;}
{
    t=<INT>{jjtThis.setName(t.image);} <OPENSQBRACK> Expression() <CLOSESQBRACK>
    | Identifier() <OPENPAR> <CLOSEPAR> 
}
// EXPRESSION - END
