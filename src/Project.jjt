options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Project)

public class Project
{
    public static void main(String args[]) throws ParseException {
        Project myCalc = new Project(System.in);
        SimpleNode root = myCalc.Program(); // devolve referência para o nó raizda árvore
        root.dump("");// imprime no ecrã a árvore
    }
}

PARSER_END(Project)

SKIP :
{
    " " | "\r" | "\t"
}

TOKEN :
{
    < LF: "\n" >
    | < THIS: "this" >
    | < NEW: "new" >
    | < FALSE: "false" >
    | < TRUE: "true" >
    | < LENGTH: "length" >
    | < COMA : "," >
    | < DOT : "." >
    | < NOT : "!" >
    | < MULT : "*" >
    | < DIV : "/" >
    | < SUB : "-" >
    | < ADD : "+" >
    | < MINOR : "<" >
    | < AND : "&&" >
    | < EQUAL : "=" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < OPENSQBRACK : "[" >
    | < CLOSESQBRACK : "]" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < OPENPAR : "(" >
    | < CLOSEPAR : ")" >
    | < RETURN : "return" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < SEMICOLON : ";" >
    | < OPENBRACK : "{" >
    | < CLOSEBRACK : "}" >
    | < CLASS : "class" >
    | < EXTENDS : "extends" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < STRING : "String" >
    | < OCTAL: "0"(["0"-"7"])+ >
    | < BINARY: "0b"("1"|"0")+ >
    | < HEX: "0"("x"|"X")(["0"-"9","a"-"f","A"-"F"])+ >
    | < DECIMAL: ("-")?(["0"-"9"])+(("_")*(["0"-"9"])+)* >
    | < IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

void Empty() : {}
{
     {}
} 

void IntegerLiteral(): {}
{
    <OCTAL>
    | <BINARY>
    | <HEX>
    | <DECIMAL>
}

SimpleNode Program(): {}
{
    ClassDeclaration() <LF>  {return jjtThis;}// código Java entre chavetas
}

// Para testar já aceita: class test extends otherTest{int a; public static void main(String[] test2){boolean alp; boolean beta; int gamma;}}
//                        class test extends otherTest{int a; public int foo(int input){boolean alp; boolean beta; int gamma; return beta;}}


void ClassDeclaration(): {} //TODO
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OPENBRACK> VarDeclaration() MainMethodDeclaration() <CLOSEBRACK>
}

void VarDeclaration():{}
{
    Type() <IDENTIFIER> <SEMICOLON>
}

void MainMethodDeclaration():{}
{
    <PUBLIC> (MainDeclaration() | MethodDeclaration())
}

void MainDeclaration():{} //TODO
{
    <STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENSQBRACK> <CLOSESQBRACK> <IDENTIFIER> <CLOSEPAR> <OPENBRACK> (VarDeclaration())* <CLOSEBRACK> 
}

void MethodDeclaration():{} //TODO
{
    Type() <IDENTIFIER> <OPENPAR> [Type() <IDENTIFIER> (<COMA> Type() <IDENTIFIER>)*] <CLOSEPAR> <OPENBRACK> (VarDeclaration())* <RETURN> Expression() <SEMICOLON> <CLOSEBRACK>
}

void Type():{}
{
    <INT> TypeAux()
    | <BOOLEAN>
    | <IDENTIFIER>
}

void TypeAux():{}
{
    [<OPENSQBRACK> <CLOSESQBRACK>]
}

void Statement():{} //TODO
{
    <IDENTIFIER>
}

void Expression():{}
{
    ExpressionToken() ExpressionAux()
}

void ExpressionAux():{} //TODO
{
    /*
        FALTA:
    Expression, ( "&&" | "<" | "+" | "-" | "*" | "/") , Expression
    | Expression, "[", Expression, "]"
    | Expression, ".", Identifier, "(", [ Expression { ",", Expression } ], ")"
    */ 
    <DOT> <LENGTH> ExpressionAux()
    | Empty()
}

void ExpressionToken():{} //TODO
{
    <TRUE>
    | <FALSE>
    | <THIS>
    | <NEW> ExpressionNew()
    | <NOT> Expression()
    | <OPENPAR> Expression() <CLOSEPAR>
    | IntegerLiteral()
    | <IDENTIFIER>
}

void ExpressionNew():{}
{
    <INT> <OPENSQBRACK> Expression() <CLOSESQBRACK>
    | <IDENTIFIER> <OPENPAR> <CLOSEPAR> 
}

/*
void Expr1(): {}
{
    Expr2() [("+" | "-") Expr2()]
}

void Expr2(): {}
{
    Expr3() [("*" | "/") Expr3()]
}

void Expr3(): {}
{
    <INTEGER>
    | "-" <INTEGER>
    | "(" Expr1() ")"
}
*/