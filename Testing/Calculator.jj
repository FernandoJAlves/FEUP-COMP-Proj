/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // devolve refer\u00c3\u00aancia para o n\u00c3\u00b3 raizda \u00c3\u00a1rvore
        root.dump("");// imprime no ecr\u00c3\u00a3 a \u00c3\u00a1rvore
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\r" | "\t"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    |   < LF: "\n" >
    |   <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
    |   <SEMICOLON: ";">
}

SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
               try {
/*@egen*/
    /*Expr1()*/VarDecl() <LF>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
               } catch (Throwable jjte000) {
                 if (jjtc000) {
                   jjtree.clearNodeScope(jjtn000);
                   jjtc000 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte000 instanceof RuntimeException) {
                   throw (RuntimeException)jjte000;
                 }
                 if (jjte000 instanceof ParseException) {
                   throw (ParseException)jjte000;
                 }
                 throw (Error)jjte000;
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/// c\u00c3\u00b3digo Java entre chavetas
}

void Expr1(): {/*@bgen(jjtree) Expr1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr1 */
    try {
/*@egen*/
    Expr2() [("+" | "-") Expr2()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr2(): {/*@bgen(jjtree) Expr2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr2 */
    try {
/*@egen*/
    Expr3() [("*" | "/") Expr3()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr3(): {/*@bgen(jjtree) Expr3 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr3 */
    try {
/*@egen*/
    <INTEGER>
    | "-" <INTEGER>
    | "(" Expr1() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDecl():{/*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/
    <ID> <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}