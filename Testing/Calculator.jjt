options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)

public class Calculator
{
    public static void main(String args[]) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // devolve referência para o nó raizda árvore
        root.dump("");// imprime no ecrã a árvore
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\r" | "\t"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    |   < LF: "\n" >
    |   <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
    |   <SEMICOLON: ";">
}

SimpleNode Expression(): {}
{
    /*Expr1()*/VarDecl() <LF>  {return jjtThis;}// código Java entre chavetas
}

SimpleNode Program(): {}
{
    ClassDeclaration() <LF>  {return jjtThis;}// código Java entre chavetas
}

void Expr1(): {}
{
    Expr2() [("+" | "-") Expr2()]
}

void Expr2(): {}
{
    Expr3() [("*" | "/") Expr3()]
}

void Expr3(): {}
{
    <INTEGER>
    | "-" <INTEGER>
    | "(" Expr1() ")"
}

void VarDecl():{}
{
    <ID> <SEMICOLON>
}